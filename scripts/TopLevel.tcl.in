## OOC synthesis to speed-up processes
set top_name                 //TOP_NAME//
set MATMUL_DIR               //MATMULDIR//
set BUILD_DIR                //BUILDDIR//
set BITSTREAM_NAME           //BITSTREAM_NAME//
set M_HEIGHT                 //M_HEIGHT//
set M_WIDTH                  //M_WIDTH//
set CHISEL_DIRNAME           //CHISEL_OUTDIR//
set DCP                      //DCP//
set RPT                      //RPT//
set PART                     //VIVADO_PART//
set THIS_SCRIPT              //TCL//
set USER_SLR_CSTRS           //USER_SLR_CSTRS//
set OOC                      //OOC//

# Project setup
# set_param general.maxThreads //NPROC//

set CHISEL_DIR ${BUILD_DIR}/${CHISEL_DIRNAME}

# Set checkpoint and report dirs
set DCP_DIR ../${DCP}
set RPT_DIR ../${RPT}
set EDF_DIR ../edf
if { ! [ file exist ${EDF_DIR} ] } { [ file mkdir ${EDF_DIR} ] }

# XDMA creation
create_project -in_memory -part ${PART} -name synth_prj
set xdma_ip_dir ../ip
if { ! [ file exist ${xdma_ip_dir} ] } { [ file mkdir ${xdma_ip_dir} ] }
set xdma_xci ${xdma_ip_dir}/xdma/xdma.xci
if {
  ([ file exist ${xdma_xci} ] == 1) &&
  ([ file mtime ${xdma_xci} ] >= [ file mtime ${THIS_SCRIPT} ])
} {
  puts "Found existing XDMA IP configuration, not re-creating IP."
} else {
  set_property PART               ${PART}                    [current_project]
  set_property IP.USER_FILES_DIR  ${xdma_ip_dir}_usr         [current_project]
  set_property BOARD_PART         xilinx.com:au200:part0:1.3 [current_project]
  set_property DEFAULT_LIB        work                       [current_project]
  create_ip -name xdma -vendor xilinx.com -library ip -version 4.1 -module_name xdma \
    -dir ${xdma_ip_dir} -force
  set_property -dict {
    CONFIG.PCIE_BOARD_INTERFACE {pci_express_x1}
    CONFIG.SYS_RST_N_BOARD_INTERFACE {pcie_perstn}
    CONFIG.axilite_master_en {true}
    CONFIG.axilite_master_scale {Kilobytes}
    CONFIG.axilite_master_size {4}
    CONFIG.axisten_freq {250}
    CONFIG.cfg_mgmt_if {false}
    CONFIG.en_gt_selection {true}
    CONFIG.mode_selection {Advanced}
    CONFIG.pf0_link_status_slot_clock_config {true}
    CONFIG.pf0_msi_enabled {false}
    CONFIG.pl_link_cap_max_link_speed {8.0_GT/s}
    CONFIG.pcie_blk_locn {X1Y2}
  } [get_ips xdma]
}

set_property BOARD_PART xilinx.com:au200:part0:1.3 [current_project]
read_ip          ${xdma_xci}
read_verilog -sv [glob ../hw/*.sv]
read_xdc         [glob ${MATMUL_DIR}/src/main/xdc/*.xdc]
# read_ip ${MATMUL_DIR}/src/main/ip/xdma/xdma_0.xcix

# Don't OOC XDMA
set_property generate_synth_checkpoint false [get_files ${xdma_xci}]

# # Update compile order
# update_compile_order -fileset [current_fileset]

# Synthesis
if { ${OOC} == 1 } {
  set_property used_in_synthesis false [get_files matmul.xdc]
  set_property used_in_implementation false [get_files dont_touch.xdc]
  # Generate IP products
  generate_target all [get_ips xdma]
  catch { config_ip_cache -export [get_ips -all xdma] }
  export_ip_user_files -of_objects [get_ips xdma] -no_script -sync -force -quiet
  # # Synth IP
  # set xdma_dcp ${xdma_ip_dir}/xdma/xdma.dcp
  # if {
  #   ([ file exist ${xdma_dcp} ] == 1) &&
  #   ([ file mtime ${xdma_dcp} ] >= [ file mtime ${THIS_SCRIPT} ])
  # } {
  #   puts "Found existing dcp, not re-synthesizing \"xdma\""
  # } else {
  #   synth_ip [get_ips xdma]
  # }
  # # read_checkpoint ${xdma_dcp}
  # set_property used_in_implementation false [get_files xdma.dcp]

  # Synthesis
  # Out-of-context (OOC) synthesize every submodule
  set ooc_modules \
  {
    Worker \
    AsyncFIFOReadPort \
    AsyncFIFOWritePort \
    SAXIRW2Full \
    AXILiteSlaveMCPWrapper \
    AXIMemory2FIFO \
    FIFO2AXIMemory \
    AXIS2FIFO \
    FIFO2AXIS \
    MCPCross2RegAdapter \
    MatMulController
  }

  # Other OOC modules
  foreach ooc_module ${ooc_modules} {
    set dcp ${DCP_DIR}/${ooc_module}_OOC.dcp
    set edf ${EDF_DIR}/${ooc_module}/${ooc_module}.edf
    if {
      ([ file exist ${dcp} ] == 1) && ([ file exist ${edf} ] == 1) &&
      ([ file mtime ${dcp} ] >= [ file mtime ${THIS_SCRIPT} ])
    } {
      puts "Found existing dcp, not re-synthesizing \"${ooc_module}\""
    } else {
      set_property used_in_synthesis false [get_files matmul.xdc]
      set_property used_in_implementation false [get_files dont_touch.xdc]
      synth_design -part ${PART} -top ${ooc_module} -mode out_of_context
      # opt_design
      # Vivado does this
      # set_param constraints.enableBinaryConstraints false
      file mkdir ${EDF_DIR}/${ooc_module}
      write_edif -force ${edf}
      write_checkpoint -force -noxdef ${dcp}
      file mkdir ${RPT_DIR}/${ooc_module}
      report_utilization -hierarchical -file $RPT_DIR/${ooc_module}/util_synth.rpt \
        -pb ${RPT_DIR}/${ooc_module}/util_synth.pb
    }
    read_checkpoint -quiet ${dcp}
    # Prevent stitching in top-level synthesis
    set_property used_in_implementation false [get_files ${dcp}]
  }

  # Top-level
  set top_dcp ${DCP_DIR}/${top_name}.dcp
  synth_design -top ${top_name} -part ${PART}
  write_checkpoint -force ${top_dcp}
  report_utilization -hierarchical -file ${RPT_DIR}/${top_name}/util_synth.rpt \
    -pb ${RPT_DIR}/${top_name}/util_synth.pb

  # Vivado scripts do this and this seems to allow opt_design after
  # link_design
  create_project -in_memory -part ${PART} -name link_impl_prj
  # Re-set board
  set_property BOARD_PART xilinx.com:au200:part0:1.3 [current_project]

  # Re-read HDL
  read_verilog -sv [glob ../hw/*.sv]
  # Re-read constraints in new project
  read_xdc [glob ${MATMUL_DIR}/src/main/xdc/*.xdc]
  # Re-read xdma IP
  read_ip ${xdma_xci}

  # Read dcp and edf
  foreach ooc_module ${ooc_module} {
    read_checkpoint ${DCP_DIR}/${ooc_module}_OOC.dcp
    # Prevent stitching in top-level synthesis
    set_property used_in_implementation false [get_files ${ooc_module}_OOC.dcp]
    # don't remember but used to work
    set_property netlist_only true [get_files ${ooc_module}_OOC.dcp]
  }
  # read_checkpoint ${xdma_dcp}
  # Prevent stitching in top-level synthesis
  # set_property used_in_implementation false [get_files ${xdma_dcp}]
  # ...
  # set_property netlist_only true [get_files ${xdma_dcp}]
  # add_files -quiet ${top_dcp}
  # add_files ${xdma_xci}
  # add_files ${xdma_dcp}

  # Read top-level DCP
  read_checkpoint ${top_dcp}

  # Link design (stitch OOC syntheses together)
  set linked_dcp ${DCP_DIR}/${top_name}_linked.dcp
  if {
    ([ file exist ${linked_dcp} ] == 1) &&
    ([ file mtime ${linked_dcp} ] >= [ file mtime ${THIS_SCRIPT} ])
  } {
    puts "Found linked design dcp, not re-linking"
    read_checkpoint ${linked_dcp}
    open_checkpoint ${linked_dcp}
  } else {
    set_property used_in_synthesis false [get_files matmul.xdc]
    set_property used_in_implementation false [get_files dont_touch.xdc]
    # Read netlists
    read_edif [glob ${EDF_DIR}/*/*]
    # Link
    link_design -top ${top_name} -part ${PART}
    write_checkpoint -force ${linked_dcp}
  }
} else {
  set_property used_in_synthesis false [get_files matmul.xdc]
  set_property used_in_implementation false [get_files dont_touch.xdc]
  # Synth
  synth_design -top ${top_name} -part ${PART}
  write_checkpoint -force -noxdef ${DCP_DIR}/${top_name}.dcp
  file mkdir ${RPT_DIR}/${top_name}
  report_utilization -hierarchical -file ${RPT_DIR}/${top_name}/util_synth.rpt \
    -pb ${RPT_DIR}/${top_name}/util_synth.pb

  # Just to be sure
  add_files -quiet ${DCP_DIR}/${top_name}.dcp
}

if { ${USER_SLR_CSTRS} == 1 } {
  set SLR_XDC ${CHISEL_DIR}/hw/*slr_assignments*.xdc
  read_xdc [glob ${SLR_XDC}]
}

# Opt
opt_design
write_checkpoint -force ${DCP_DIR}/${top_name}_opt.dcp

# Placement
place_design
phys_opt_design
write_checkpoint -force ${DCP_DIR}/${top_name}_placed.dcp

# Routing
route_design
phys_opt_design
write_checkpoint -force ${DCP_DIR}/${top_name}_routed.dcp

# Reports
report_utilization -hierarchical -file ${RPT_DIR}/post-impl-util.rpt
report_timing_summary -file ${RPT_DIR}/post-impl-timing.rpt

# Bitstream
write_bitstream -force ../${BITSTREAM_NAME}

# Gracefully close
close_project
close_project
