# Set default shell (for using bash syntax in shells)
SHELL           = /bin/bash
# Project directory
MATMULDIR      := $(shell pwd)
# Main build directory
BUILDDIR        = build
# Number of processors
NPROC           = $(shell nproc)

# Insert newlines in Makefile strings
define n


endef

# Submodules
SUBMODULE_DIR  := external
SUBMODULES     := $(wildcard $(SUBMODULE_DIR)/*)
$(foreach sub,$(SUBMODULES),\
$(if $(shell ls -A $(sub)),,$(error $\
  Directory "$(sub)" is empty, cannot compile.$n$\
  --Hint: Did you run `git submodule update --init --recursive`?)\
))

# Top-level module name. This variable should match the name of the
# top-level module generated by Chisel
TOP_NAME       := TopLevel
# Machine parameters
M_HEIGHT        = 16
M_WIDTH         = 16
FLOAT           = saf
PLL_MULT        = 8
PLL_DIV         = 4
# Flopoco mult is not pipelined
ifeq ($(FLOAT),flopoco)
DSP_DEPTH       = 0
else
DSP_DEPTH       = 4
endif
PIPELINE_DEPTH  = 3
# Fixed (hardware clock)
BASE_FREQ      := 156.25
CORE_FREQ_EXPR := '$(BASE_FREQ) * $(PLL_MULT) / $(PLL_DIV)'
CORE_FREQ      := $(shell echo $(CORE_FREQ_EXPR) | bc)
FIFO_TYPE       = default
CHISEL_OUTDIR   = $(M_HEIGHT)x$(M_WIDTH)_$(FLOAT)
# Chisel output dir (passed to Chisel Main through '-o')
CHISELDIR      := $(BUILDDIR)/$(CHISEL_OUTDIR)
# HW dir
HWDIR          := $(CHISELDIR)/hw
# Location of Chisel's output: this should match what Chisel does too
SYSTEMVERILOG  := $(HWDIR)/sv/$(TOP_NAME).sv
# SBT
# Memory (kB)
SBT_MEM         = 65535
# Flags passed to Main
SBT_RUN_FLAGS   = -w $(M_WIDTH) -h $(M_HEIGHT) \
-f $(FLOAT) \
-mpd $(DSP_DEPTH) -ppd $(PIPELINE_DEPTH) \
-xpll $(PLL_MULT) -dpll $(PLL_DIV) \
-fbase $(BASE_FREQ) \
-fifo $(FIFO_TYPE) \
-o $(CHISELDIR)
ifdef CIRCT_FLAGS
SBT_RUN_FLAGS  += -C \"$(CIRCT_FLAGS)\"
endif
ifdef FIRTOOL_FLAGS
SBT_RUN_FLAGS  += -F \"$(FIRTOOL_FLAGS)\"
endif

# Vitis kernel compilation
ifdef VITIS
SBT_RUN = runMain matmul.stage.VitisMain
else
SBT_RUN = runMain matmul.stage.Main
endif
# Final command for sbt
SBT_RUN_CMD = "$(SBT_RUN) $(SBT_RUN_FLAGS)"

# C
CC              = gcc
CSRCDIR         = src/main/c/src
CINCDIR         = src/main/c/inc
CFLAGS          = -O2 -g -Wall
CLIBFLAGS       = -lgsl -lgslcblas
# Includes .../host to get hardware.h
CINCFLAGS       = -I$(CINCDIR) -I$(CHISELDIR)/sw
# Objects
OBJDIR         := $(BUILDDIR)/$(CHISEL_OUTDIR)/objs
# Get objects from sources
SRCS           := $(wildcard $(CSRCDIR)/*.c)
OBJS           := $(patsubst $(CSRCDIR)/%.c,$(OBJDIR)/%.o,$(SRCS))
# Executable name
EXE_NAME        = matmul-host
# Executable location
EXE            := $(CHISELDIR)/sw/$(EXE_NAME)

# FloPoCo
FLOPOCO        := flopoco
FLOPOCO_DIR    := $(HWDIR)/vhdl/
BUILD_FP        = 0
FLOPOCO_DOCKER  = matmul/flopoco-docker:latest
FLOPOCO_SRC    := external/flopoco
FLOPOCO_VHDL   := $(FLOPOCO_DIR)/{InputIEEE.vhdl,OutputIEEE.vhdl,FPAdd.vhdl,FPMult.vhdl}

# Vivado
# Out-of-context enabled by default
OOC             = 1
# Create compilation script
TCL_TEMPLATE   := scripts/$(TOP_NAME).tcl.in
# Compilation script location
TCL            := $(shell readlink -f $(CHISELDIR))/$(notdir $(TCL_TEMPLATE:%.in=%))
# Vivado checkpoints
DCP             = dcp
DCP_DIR        := $(CHISELDIR)/$(DCP)
# Vivado reports
RPT             = rpt
RPT_DIR        := $(CHISELDIR)/$(RPT)
# Vivado logs
LOG             = run
LOG_DIR        := $(CHISELDIR)/$(LOG)
BITSTREAM_NAME := matmul-$(M_HEIGHT)x$(M_WIDTH)_$(FLOAT).bit
BITSTREAM      := $(CHISELDIR)/$(BITSTREAM_NAME)
# Defaults to Alveo U200
VIVADO_PART     = xcu200-fsgd2104-2-e
# User-defined SLR constraints
USER_SLR_CSTRS := 0

default: all

help:
	@echo "Other undocumented variables are in the Makefile, but it's advised not to use them."
	@echo "Documented variables are shown with their current value between ()."
	@echo
	@echo "BUILDDIR       : Top-level build directory ($(BUILDDIR))"
	@echo "CHISEL_OUTDIR  : Current build's subdirectory name (relative to \$$(BUILDDIR)) ($(CHISEL_OUTDIR))"
	@echo "NPROC          : Override nproc ($(NPROC))"
	@echo "TOP_NAME       : Top-level module name (TopLevel for matmul)"
	@echo "M_HEIGHT       : Matrix height ($(M_HEIGHT))"
	@echo "M_WIDTH        : Matrix width ($(M_WIDTH))"
	@echo "FLOAT          : Float imlementation (\"flopoco\", \"saf\" or \"hardfloat\") ($(FLOAT))"
	@echo "BASE_FREQ      : Core reference clock frequency (hardcoded by constraints) ($(BASE_FREQ))"
	@echo "PLL_MULT       : PLL multiply factor ($(PLL_MULT))"
	@echo "PLL_DIV        : PLL divide factor ($(PLL_DIV))"
	@echo "DSP_DEPTH      : DSP pipelining depth (always 0 with FLOAT=\"flopoco\") ($(DSP_DEPTH))"
	@echo "PIPELINE_DEPTH : Pipeline register count between workers ($(PIPELINE_DEPTH))"
	@echo "FIFO_TYPE      : FIFO implementation: \"default\" or \"xpm\" ($(FIFO_TYPE))"
	@echo "SBT_MEM        : Max memory allocated to SBT's JVM ($(SBT_MEM))"
	@echo "CIRCT_FLAGS    : Additional flags for CIRCT ($(CIRCT_FLAGS))"
	@echo "FIRTOOL_FLAGS  : Additional flags for Firtool ($(FIRTOOL_FLAGS))"
	@echo "CC             : C Compiler ($(CC))"
	@echo "CFLAGS         : Flags for GCC ($(CFLAGS))"
	@echo "EXE_NAME       : Name for the host executable ($(EXE_NAME))"
	@echo "BUILD_FP       : Build FloPoCo container in external/flopoco (1:yes/0:no) ($(BUILD_FP))"
	@echo "OOC            : Use out-of-context synthesis (1:yes/0:no) ($(OOC))"
	@echo "BITSTREAM_NAME : Name for the produced bitstream ($(BITSTREAM_NAME))"
	@echo "VIVADO_PART    : Only supported part is xcu200-fsgd2104-2-e for now ($(VIVADO_PART))"
	@echo "USER_SLR_CSTRS : Apply Chisel-generated SLR constraints (1:yes/0:no) ($(USER_SLR_CSTRS))"
	@echo
	@echo "Run outputs and reports will be produced in [$(CHISELDIR)]"

$(CHISELDIR):
	mkdir -p $(CHISELDIR)

# Build docker if asked (needs docker buildx)
$(FLOPOCO_DIR)/.docker-built: $(wildcard $(FLOPOCO_SRC)/*) $(CHISELDIR)
	mkdir -p $(FLOPOCO_DIR)
ifeq ($(BUILD_FP), 1)
	make -C external/flopoco-docker build \
	  OUTDIR=$(FLOPOCO_DIR) CONT_NAME=$(FLOPOCO_DOCKER)
endif

$(FLOPOCO_VHDL): $(FLOPOCO_DIR)/.docker-built
# Could offload this to flopoco docker makefile...
	docker run --name flopoco_docker $(FLOPOCO_DOCKER) \
	  "outputFile=FPAdd.vhdl frequency=200 target=VirtexUltraScalePlus FPAdd we=8 wf=22 dualPath=true" \
	  "outputFile=FPMult.vhdl FPMult we=8 wf=22" \
	  "outputFile=InputIEEE.vhdl frequency=300 target=VirtexUltraScalePlus InputIEEE wEIn=8 wFIn=23 wEOut=8 wFOut=22" \
	  "outputFile=OutputIEEE.vhdl frequency=300 target=VirtexUltraScalePlus OutputIEEE wEIn=8 wFIn=22 wEOut=8 wFOut=23"
	for core in FPMult FPAdd InputIEEE OutputIEEE; do \
	  docker cp flopoco_docker:/output/$${core}.vhdl $(FLOPOCO_DIR)/; \
	done
	docker rm flopoco_docker
.PHONY: flopoco
flopoco: $(FLOPOCO_VHDL)

$(SYSTEMVERILOG): $(CHISELDIR) $(shell find src/main/scala -name '*.scala')
	sbt --batch --color=always --mem $(SBT_MEM) $(SBT_RUN_CMD)

ifeq ($(FLOAT), flopoco)
.PHONY: hw
hw: $(SYSTEMVERILOG) $(FLOPOCO_VHDL)
else
.PHONY: hw
hw: $(SYSTEMVERILOG)
endif

$(OBJDIR)/%.o: $(CSRCDIR)/%.c $(SYSTEMVERILOG)
	@mkdir -p $(OBJDIR)
	$(CC) $(CLIBFLAGS) $(CINCFLAGS) $(CFLAGS) -c -o $@ $<

# $(EXE): $(OBJS) $(SYSTEMVERILOG) $(CHISELDIR)
$(EXE): $(OBJS) $(SYSTEMVERILOG)
	$(CC) $(CLIBFLAGS) $(CINCFLAGS) $(CFLAGS) \
	  -o $@ $(OBJDIR)/*.o
.PHONY: host
host: $(EXE)

VAR_LIST := $(shell sed -rn 's#^[^/]*//([^/]+)//$$#\1#p' $(TCL_TEMPLATE))
$(TCL): $(CHISELDIR) $(TCL_TEMPLATE)
	rm -f $(TCL)
	cp $(TCL_TEMPLATE) $(TCL)
	@$(foreach var,$(VAR_LIST), \
	echo "Replacing $(var) with $($(value var)) in $(TCL)"; \
	sed -ri 's#//$(var)//#$($(value var))#' $(TCL); \
	)
	@echo "$(TCL) generated."
.PHONY: tcl
tcl: $(TCL)

ifeq ($(FLOAT), flopoco)
$(BITSTREAM): $(SYSTEMVERILOG) $(TCL) $(FLOPOCO_VHDL)
else
$(BITSTREAM): $(SYSTEMVERILOG) $(TCL)
endif
#	 rm -rf $(RPT_DIR)
	@mkdir -p $(LOG_DIR)
	@mkdir -p $(CHISELDIR)/run
	cd $(CHISELDIR)/run; \
	  vivado -mode batch -source ../$(notdir $(TCL)) \
	    -log ../$(LOG)/$(TOP_NAME).log -journal ../$(LOG)/$(TOP_NAME).jou
.PHONY: bitstream
bitstream: $(BITSTREAM)

all: $(SYSTEMVERILOG) $(OBJS) $(EXE) $(BITSTREAM)
	@echo "[MatMul done!]"
	@echo "Outputs were written to $(CHISELDIR)"

.PHONY: clean
clean:
	rm -rf $(BUILDDIR)/$(CHISEL_OUTDIR)
	docker rm flopoco_docker || true

.PHONY: distclean
distclean: clean
#	find . -name '*.o' -delete
#	rm -rf project
#	rm -rf target
